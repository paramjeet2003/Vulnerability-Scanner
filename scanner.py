#!/usr/bin/env python

import requests
import re
import urllib.parse as up
from bs4 import BeautifulSoup

class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_links_from(self, url):
        response = self.session.get(self.target_url)
        content = response.content.decode('utf-8')
        return re.findall('(?:href=")(.*?)"', content) #extraction complete
    
    def crawl(self, url=None):
        if url == None:
            url = self.target_links
        href_links = self.extract_links_from(url)
        for link in href_links:
            '''some urls are incomplete, to make them complete 
            we can use the library called urllib'''
            link = up.urljoin(self.target_url, link)
            #for unique links that comes with a '#' and prevent the repeatitiveness of the links 
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                # with open("spider", "a") as sp:
                #     sp.write("[+] Extracted Unique link --> " + link + "\n")
                self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)
        #parsing the html 
        parsed_html = BeautifulSoup(response.content)
        #finding the code line starts with form tag 
        return parsed_html.findAll("form")
    
    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = up.urljoin(url, action)
        print(action)
        method = form.get('method')
        print(method)

        inputs_list = form.findAll("input")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = "test"
            post_data[input_name] = input_value
            if method == "post":
                return requests.post(post_url, data=post_data)
            return self.session.get(post_url, params = post_data)
        
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in "+ link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS Discovered in " + link + " in the following form")
                    print(form)
            if "=" in link:
                print("[+] Testing " + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS Discovered in " + link + " in the following link")


    def test_xss_in_link(self,url):
        xss_test_script = "<sCript>alert('XSS')</scriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return b'xss_test_script in response.content'


    def test_xss_in_form(self, form,url):
        #we are using the exploit payload from beef-xss
        xss_test_script = "<sCript>alert('XSS')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.content.decode('utf-8')
